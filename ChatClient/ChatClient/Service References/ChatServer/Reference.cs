//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ChatServer {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatServer.IChatServer")]
    public interface IChatServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/GetMessage", ReplyAction="http://tempuri.org/IChatServer/GetMessageResponse")]
        void GetMessage(ChatLibrary.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/GetMessage", ReplyAction="http://tempuri.org/IChatServer/GetMessageResponse")]
        System.Threading.Tasks.Task GetMessageAsync(ChatLibrary.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/RegisterUser", ReplyAction="http://tempuri.org/IChatServer/RegisterUserResponse")]
        bool RegisterUser(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/RegisterUser", ReplyAction="http://tempuri.org/IChatServer/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/GetUpdate", ReplyAction="http://tempuri.org/IChatServer/GetUpdateResponse")]
        ChatLibrary.Message[] GetUpdate(int userHistoryLength, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/GetUpdate", ReplyAction="http://tempuri.org/IChatServer/GetUpdateResponse")]
        System.Threading.Tasks.Task<ChatLibrary.Message[]> GetUpdateAsync(int userHistoryLength, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/UpdateUsers", ReplyAction="http://tempuri.org/IChatServer/UpdateUsersResponse")]
        ChatLibrary.User[] UpdateUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/UpdateUsers", ReplyAction="http://tempuri.org/IChatServer/UpdateUsersResponse")]
        System.Threading.Tasks.Task<ChatLibrary.User[]> UpdateUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/LogOut", ReplyAction="http://tempuri.org/IChatServer/LogOutResponse")]
        void LogOut(ChatLibrary.User usr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/LogOut", ReplyAction="http://tempuri.org/IChatServer/LogOutResponse")]
        System.Threading.Tasks.Task LogOutAsync(ChatLibrary.User usr);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServerChannel : ChatClient.ChatServer.IChatServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServerClient : System.ServiceModel.ClientBase<ChatClient.ChatServer.IChatServer>, ChatClient.ChatServer.IChatServer {
        
        public ChatServerClient() {
        }
        
        public ChatServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void GetMessage(ChatLibrary.Message message) {
            base.Channel.GetMessage(message);
        }
        
        public System.Threading.Tasks.Task GetMessageAsync(ChatLibrary.Message message) {
            return base.Channel.GetMessageAsync(message);
        }
        
        public bool RegisterUser(string login, string password) {
            return base.Channel.RegisterUser(login, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string login, string password) {
            return base.Channel.RegisterUserAsync(login, password);
        }
        
        public ChatLibrary.Message[] GetUpdate(int userHistoryLength, string userLogin) {
            return base.Channel.GetUpdate(userHistoryLength, userLogin);
        }
        
        public System.Threading.Tasks.Task<ChatLibrary.Message[]> GetUpdateAsync(int userHistoryLength, string userLogin) {
            return base.Channel.GetUpdateAsync(userHistoryLength, userLogin);
        }
        
        public ChatLibrary.User[] UpdateUsers() {
            return base.Channel.UpdateUsers();
        }
        
        public System.Threading.Tasks.Task<ChatLibrary.User[]> UpdateUsersAsync() {
            return base.Channel.UpdateUsersAsync();
        }
        
        public void LogOut(ChatLibrary.User usr) {
            base.Channel.LogOut(usr);
        }
        
        public System.Threading.Tasks.Task LogOutAsync(ChatLibrary.User usr) {
            return base.Channel.LogOutAsync(usr);
        }
    }
}
